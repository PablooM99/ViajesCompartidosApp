rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    function isAdmin() {
      return isSignedIn() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS
    match /users/{uid} {
      allow read: if true;

      // El dueño puede CREAR su doc
      allow create: if isOwner(uid);

      // El dueño puede EDITAR su doc, PERO NO el campo 'role'
      allow update: if isOwner(uid) &&
        !request.resource.data.diff(resource.data).changedKeys().hasAny(['role']);

      // Admin puede editar SOLO el campo 'role'
      allow update: if isAdmin() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['role']) &&
        (request.resource.data.role in ['traveler','driver','admin']);

      // El dueño puede borrar su doc (opcional)
      allow delete: if isOwner(uid);

      // Subcolección: alertas (seguir rutas en Home)
      match /alerts/{alertId} {
        allow read, create, update, delete: if isOwner(uid);
      }
    }

    // REGLAS (recurrencias del chofer)
    match /rules/{ruleId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.ownerUid);
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }

    // TRIPS
    match /trips/{tripId} {
      allow read: if true;
      allow create: if isSignedIn();
      // El dueño puede editar, salvo seatsAvailable (lo maneja CF)
      allow update: if isSignedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.seatsAvailable == resource.data.seatsAvailable;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;

      // BOOKINGS (solo Functions escriben)
      match /bookings/{bookingId} {
        // lectura: pasajero de la reserva o dueño del viaje
        allow read: if isSignedIn() && (
          request.auth.uid == resource.data.uid ||
          get(/databases/$(database)/documents/trips/$(tripId)).data.ownerUid == request.auth.uid
        );
        allow create, update, delete: if false;

        // PAYMENTS (comprobantes)
        match /payments/{paymentId} {
          allow read: if isSignedIn() && (
            request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)/bookings/$(bookingId)).data.uid ||
            request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerUid
          );
          allow create: if isSignedIn() &&
            request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)/bookings/$(bookingId)).data.uid;
          allow update, delete: if false;
        }
      }
    }

    // CONVERSATIONS (chat privado 1 a 1)
    match /conversations/{cid} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn()
        && request.resource.data.participants.size() == 2
        && request.auth.uid in request.resource.data.participants;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;

      match /messages/{mid} {
        allow read: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(cid)).data.participants;
        allow create: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(cid)).data.participants;
        allow update, delete: if false;
      }
    }

    // REVIEWS (solo lectura desde cliente)
    match /drivers/{driverUid}/reviews/{rid} {
      allow read: if true;
      allow create, update, delete: if false;
    }
  }
}
