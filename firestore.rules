rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ---------------- users ----------------
    match /users/{uid} {
      allow read: if true;

      // El dueño puede crear/editar sus datos
      allow create, update, delete: if isOwner(uid);

      // Admin puede cambiar SOLO el campo role
      allow update: if isAdmin()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['role'])
        && (request.resource.data.role in ['traveler','driver','admin']);
    }

    // ------------- rules (chofer) ----------
    match /rules/{ruleId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.ownerUid);
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
    }

    // ---------------- trips ----------------
    match /trips/{tripId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.seatsAvailable == resource.data.seatsAvailable;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;

      // ---- bookings dentro de un trip (lectura por dueño del viaje o pasajero) ----
      match /bookings/{bookingId} {
        // Lectura: pasajero dueño de la reserva o dueño del viaje
        allow read: if isSignedIn() && (
          request.auth.uid == resource.data.uid ||
          get(/databases/$(database)/documents/trips/$(tripId)).data.ownerUid == request.auth.uid
        );
        // Escrituras SOLO por Functions
        allow create, update, delete: if false;

        // Subcolección de pagos
        match /payments/{paymentId} {
          allow read: if isSignedIn() && (
            request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)/bookings/$(bookingId)).data.uid ||
            request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)).data.ownerUid
          );
          allow create: if isSignedIn() &&
            request.auth.uid == get(/databases/$(database)/documents/trips/$(tripId)/bookings/$(bookingId)).data.uid;
          allow update, delete: if false;
        }
      }
    }

    // ---------- Lectura de MIS reservas vía collection-group ----------
    // Habilita: collectionGroup('bookings').where('uid','==',uid)
    match /{anyPath=**}/bookings/{bookingId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.uid;
    }

    // ---------------- conversations ----------------
    match /conversations/{cid} {
      // IMPORTANTE: permitir get cuando el doc aún NO existe (resource == null),
      // porque la UI lo "preabre" antes de crearlo.
      allow read: if isSignedIn() &&
        (resource == null || request.auth.uid in resource.data.participants);

      // crear/merge por cualquiera de los 2 participantes
      allow create: if isSignedIn()
        && request.resource.data.participants.size() == 2
        && request.auth.uid in request.resource.data.participants;

      // actualizar (p.ej. lastMessageAt) por cualquiera de los participantes
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;

      match /messages/{mid} {
        allow read: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(cid)).data.participants;
        allow create: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(cid)).data.participants;
        allow update, delete: if false;
      }
    }

    // ---------------- reviews ----------------
    match /drivers/{driverUid}/reviews/{rid} {
      allow read: if true;
      allow create, update, delete: if false;
    }
  }
}
